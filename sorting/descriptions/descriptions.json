{
  "QuickSortDemo": {
    "demo_class_description": {
      "Demo Class Name": "QuickSortDemo",
      "Description": [
        "Quick sort is an average case O(n log n) and worst case O(n^2). Quicksort works by choosing a ",
        "pivot element and then sorting around that pivot element. Quicksort uses recursion to continually call itself ",
        "using a different element as the pivot element on each call. In this implementation we use the partition ",
        "function sort around the chosen pivot element. As we loop through the elements in the subarray in partition, ",
        "we find an element greater than the pivot and less than the pivot and swap them. We  do this until we get down",
        " to one element in each pivot and then return causing all the sorted subportions to merge on return."
      ]
    },
    "sort_data_set1": {
      "Title": "sort_data_set1",
      "Input Data": [
        "data_set1 = [2, 6, 8, 2, 3, 787, 23, 4, 66, 33, 99, 345, 34, 2324, 4567, 32, 5, 57, 324, 44, 2, ",
        "3, 3, 32, 32, 456]"
      ],
      "Description": [
        "This will perform quicksort on dataset 1."
      ]
    },
    "sort_data_set2": {
      "Title": "sort_data_set2",
      "Input Data": [
        "data_set2 = [1, 1, 1, 34, 2345, 257, 8, 1, 89, 1, 6234, 56, 2, 45, 2323, 54, 8, 2, 344, 88, 435,",
        "8337, 82, 3, 2, 9, 7]"
      ],
      "Description": [
        "This will perform quicksort on dataset 2."
      ]
    },
    "sort_data_set_small": {
      "Title": "sort_data_set_small",
      "Input Data": "[9, 6, 8, 2, 4]",
      "Description": [
        "This will perform quiicksort on a small data set. If you want to experiment with the inner ",
        "workings of the sort this would be easier to debug."
      ]
    }
  },
  "SelectionSortDemo": {
    "demo_class_description": {
      "Demo Class Name": "SelectionSortDemo",
      "Description": [
        "Selection sort is an O(n^2) that works by selecting the lowest element in the array and the moving it to the ",
        "end of the sorted portion of the array. At each iteration move the sorted index of the array + , then we loop ",
        "through the unsorted portion of the array to find the lowest element and then move it to the end of the sorted ",
        "portion of the array. "
      ]
    },
    "sort_data_set1": {
      "Title": "sort_data_set1",
      "Input Data": [
        "data_set1 = [2, 6, 8, 2, 9, 787, 332, 4, 22, 33, 99, 345, 23, 2324, 456, 32, 5, 57, 324, 23, 2,",
        "3, 3, 3, 32, 123]"
      ],
      "Description": [
        "Here run selection sort on data set 1"
      ]
    },
    "sort_data_set2": {
      "Title": "sort_data_set2",
      "Input Data": [
        "data_set2 = [0, 1, 1, 34, 2345, 257, 8, 1, 732, 1, 6234, 82, 2, 45, 2000, 54, 8, 2, 789, 84, 432,",
        "456, 82, 3, 2, 9, 7]"
      ],
      "Description": [
        "Here we run selection sort on data set 2"
      ]
    },
    "sort_data_set_small": {
      "Title": "sort_data_set_small",
      "Input Data": "Input data",
      "Description": [
        "This will perform selection sort on a small data set. If you want to experiment with the inner ",
        "workings of the sort this would be easier to debug."
      ]
    }
  },
  "BubbleSortDemo": {
    "demo_class_description": {
      "Demo Class Name": "BubbleSortDemo",
      "Description": [
        "Bubble sort is a O(n^2) sorting algorithm that works by iteratively looping through the array ",
        "and then swapping elements to the left when the right element is greater than the left element. The algorithm ",
        "stops when we make a full pass through the array and perform no swaps. "
      ]
    },
    "sort_data_set1": {
      "Title": "sort_data_set1",
      "Input Data": [
        "data_set1 = [2, 6, 8, 2, 3, 787, 23, 4, 66, 33, 99, 345, 34, 2324, 4567, 32, 5, 57, 324, 44, 2, 3, 3, 32, 32, 456]"
      ],
      "Description": [
        "This will perform bubble sort on data set 1."
      ]
    },
    "sort_data_set2": {
      "Title": "sort_data_set2",
      "Input Data": [
        "data_set2 = [1, 1, 1, 34, 2345, 257, 8, 1, 89, 1, 6234, 56, 2, 45, 2323, 54, 8, 2, 344, 88, 435, ",
        "8337, 82, 3, 2, 9, 7]"
      ],
      "Description": [
        "This will perform bubble sort on data set 2"
      ]
    },
    "sort_data_set_small": {
      "Title": "sort_data_set_small",
      "Input Data": "[9, 6, 8, 2, 4]",
      "Description": [
        "This will perform bubble set on a small data set. If you want to experiment with the inner workings of the sort ",
        "this would be easier to debug."
      ]
    }
  },
  "MergeSortDemo": {
    "demo_class_description": {
      "Demo Class Name": "MergeSortDemo",
      "Description": [
        "Merge sort works by breaking the array  into two until there is only one element in each set, ",
        "then it will then put together these smaller sets into a larger set recursively until there the entire set is sorted."
      ]
    },
    "sort_data_set1": {
      "Title": "sort_data_set1",
      "Input Data": ["data_set1 = [2, 6, 8, 2, 3, 787, 23, 4, 66, 33, 99, 345, 34, 2324, 4567, 32, 5, 57, 324, 44, 2, 3,",
      "3, 32, 32, 456]"],
      "Description": [
        "This will perform merge sort on data set 1"
      ]
    },
    "sort_data_set2": {
      "Title": "sort_data_set2",
      "Input Data": "Input data",
      "Description": [
        "This will perform merge sort on data set 2"
      ]
    },
    "sort_data_set_small": {
      "Title": "sort_data_set_small",
      "Input Data": "[9, 6, 8, 2, 4]",
      "Description": [
        "This will perform merge sort on a small data set. If you want to experiment with the inner ",
        "workings of the sort this would be easier to debug."
      ]
    }
  },
  "InsertionSortDemo": {
    "demo_class_description": {
      "Demo Class Name": "InsertionSortDemo",
      "Description": [
        "Insertion is an O(n^2) sorting algorithm by by splitting the array into a sorted side and a unsorted side. On ",
        "each iteration of the sort it will take an element from the unsorted side and put it into its correct position in",
        "the sorted side. On each iteration we move the sorted index up by 1. One advantage of insertion sort over bubble",
        ", sort is that if the next element in the unsorted array is already sorted then we don't need to loop through ",
        "the entire list, we only  need to compare the last element in the sorted array to first element in the unsorted",
        "array."
      ]
    },
    "sort_data_set1": {
      "Title": "sort_data_set1",
      "Input Data": [
        "data_set1 = [2, 6, 8, 2, 3, 787, 23, 4, 66, 33, 99, 345, 34, 2324, 4567, 32, 5, 57, 324, 44, 2, 3,",
        "3, 32, 32, 456]"
      ],
      "Description": [
        "Here we use insertion sort to sort data set 1"
      ]
    },
    "sort_data_set2": {
      "Title": "sort_data_set2",
      "Input Data": [
        "data_set2 = [1, 1, 1, 34, 2345, 257, 8, 1, 89, 1, 6234, 56, 2, 45, 2323, 54, 8, 2, 344, 88, 435,",
        "8337, 82, 3, 2, 9, 7]"
      ],
      "Description": [
        "Here we use insertion sort to sort data set 2"
      ]
    },
    "sort_data_set_small": {
      "Title": "sort_data_set_small",
      "Input Data": "data_set_small = [9, 6, 8, 2, 4]",
      "Description": [
        "This will insertion bubble set on a small data set. If you want to experiment with the inner ",
        "workings of the sort this would be easier to debug."
      ]
    }
  },
  "RadixSortDemo": {
    "demo_class_description": {
      "Demo Class Name": "RadixSortDemo",
      "Description": ["Radix sort works by looking at one significant digit in the elements to be sorted at a time. ",
        "For example if you were sorting 103, 10, and 201 radix sort would first only look at the ones digit in each of ",
        "these numbers and sort on that, so it would order them as 10, 201, 103. After that it would move into the tens ",
        "digit and then sort that first sorted listed by the number in the tens digit.  In order to implement radix sort",
        "we need to set up buckets for each of the digits 0-9 so that we have a place to put these numbers as we move ",
        "through each significant digit.(Sidenote, if we wanted to implement radix sort for a different base number we ",
        "would need different numbered buckets)."
      ]
    },
    "sort_dataset_1": {
      "Title": "sort_dataset_1",
      "Input Data": ["dataset1 = [1, 9, 100, 34, 23, 11, 66, 77, 5, 8, 199]"
      ],
      "Description": [
        "Here we sort dataset 1 with radix sort"
      ]
    },
    "sort_dataset_2": {
      "Title": "sort_dataset_2",
      "Input Data": ["dataset2 = [201, 1000, 3000, 2000, 5, 6, 3, 10001]"
      ],
      "Description": [
        "Here we sort dataset 2 with radix sort"
      ]
    },
    "sort_dataset_3": {
      "Title": "sort_dataset_3",
      "Input Data": ["dataset3 = [5, 6, 7, 2, 2, 3, 7, 0, 0, 0, 1, 1, 5]"
      ],
      "Description": [
        "Here we sort dataset 3 with radix sort"
      ]
    }
  }
}