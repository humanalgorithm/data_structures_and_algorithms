{
  "AllAnagramsDemo": {
    "demo_class_description": {
      "Demo Class Name": "AllAnagramsDemo",
      "Description": [
        "Description here"
      ]
    },
    "anagrams_recursion_on_pre_and_post_string": {
      "Title": "anagrams_recursion_on_pre_and_post_string",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    },
    "anagrams_swap_on_step_and_index": {
      "Title": "anagrams_swap_on_step_and_index",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    },
    "anagrams_swap_on_step_and_index_2": {
      "Title": "anagrams_swap_on_step_and_index_2",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    }
  },
  "CheckStringRotationDemo": {
    "demo_class_description": {
      "Demo Class Name": "CheckStringRotationDemo",
      "Description": [
        "Checks to see if one string is a substring of anoter. Algorithm should check whether that string is a match ",
        "both forwards and backwards wrapping around the array when nessecary."
      ]
    },
    "check_string_regular_forwards_match": {
      "Title": "check_string_regular_forwards_match",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    },
    "check_string_forwards_wraparound_match": {
      "Title": "check_string_forwards_wraparound_match",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    },
    "check_string_backwards_wraparound_match": {
      "Title": "check_string_backwards_wraparound_match",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    },
    "check_forwards_string_no_match": {
      "Title": "check_forwards_string_no_match",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    },
    "check_backwards_no_match": {
      "Title": "check_backwards_no_match",
      "Input Data": "Input data",
      "Description": [
        "Description goes here"
      ]
    }
  },
  "RemoveDuplicatesDemo": {
    "demo_class_description": {
      "Demo Class Name": "RemoveDuplicatesDemo",
      "Description": [
        "In this example we remove duplicate characters from an array using an in place sorting algorithm. Since we ",
        "complete this in only one loop then the time complexity is O(n) In remove_duplicates we accomplish this by ",
        "sorting the passed in array, in remove_duplicates_using_string_buffer we use a string ascii value map to assist",
        "in the comparisons."
      ]
    },
    "remove_duplicates_in_place_string1": {
      "Title": "remove_duplicates_in_place_string1",
      "Input Data": "['a', 'n', 'c', 'd', 'a', 'a', 'n', 't', 't']",
      "Description": [
        "This algorithm uses a duplicates pointer to store the index at which all of the elements will be duplicates. As we ",
        "loop through the string we move duplicates with a swap behind the duplicates pointer and then increment the ",
        "pointer by +1."
      ]
    },
    "remove_duplicates_in_place_string2": {
      "Title": "remove_duplicates_in_place_string2",
      "Input Data": "['d', 'n', 'c', 'd', 'd', 'q', 'o', 'p', 't']",
      "Description": [
        "This algorithm uses a duplicates pointer to store the index at which all of the elements will be duplicates. As we ",
        "loop through the string we move duplicates with a swap behind the duplicates pointer and then increment the ",
        "pointer by +1."
      ]
    },
    "remove_duplicates_in_place_string3": {
      "Title": "remove_duplicates_in_place_string3",
      "Input Data": "['d', 'd', 'd', 'd']",
      "Description": [
        "This algorithm uses a duplicates pointer to store the index at which all of the elements will be duplicates. As we ",
        "loop through the string we move duplicates with a swap behind the duplicates pointer and then increment the ",
        "pointer by +1."
      ]
    },
    "remove_duplicates_using_string_buffer_string1": {
      "Title": "remove_duplicates_using_string_buffer_string1",
      "Input Data": "['a', 'n', 'c', 'd', 'a', 'a', 'n', 't', 't']",
      "Description": [
        "This algorithm will first copy all of the a-z and A-Z characters into an array and then use that array as a ",
        "tracker of whether or not these characters have been seen before during the loop.Once the character is found it",
        " is marked as true in the a-z A-Z character buffer and copied into the tail pointer of the original string ",
        "string pointer."
      ]
    },
    "remove_duplicates_using_string_buffer_string2": {
      "Title": "remove_duplicates_using_string_buffer_string2",
      "Input Data": "['d', 'n', 'c', 'd', 'd', 'q', 'o', 'p', 't']",
      "Description": [
        "This algorithm will first copy all of the a-z and A-Z characters into an array and then use that array as a ",
        "tracker of whether or not these characters have been seen before during the loop.Once the character is found it",
        " is marked as true in the a-z A-Z character buffer and copied into the tail pointer of the original string ",
        "string pointer."
      ]
    },
    "remove_duplicates_using_string_buffer_string3": {
      "Title": "remove_duplicates_using_string_buffer_string3",
      "Input Data": "['d', 'd', 'd', 'd']",
      "Description": [
        "This algorithm will first copy all of the a-z and A-Z characters into an array and then use that array as a ",
        "tracker of whether or not these characters have been seen before during the loop.Once the character is found it",
        " is marked as true in the a-z A-Z character buffer and copied into the tail pointer of the original string ",
        "string pointer."
      ]
    }
  }
}

