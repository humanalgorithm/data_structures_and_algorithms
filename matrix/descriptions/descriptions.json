{
  "CountNegativeNumbersMatrixDemo": {
    "demo_class_description": {
      "Demo Class Name": "CountNegativeNumbersMatrixDemon",
      "Description": [
        "This file demonstrates how to count the number of negative numbers in a matrix with each row ",
        "being sorted. In this file we demonstrate three different ways to solve the problem 1) In the naive approach we",
        " simply loop through every element in each row and count the number of negatives but this doesn't take advantage",
        " of the fact that the rows are sorted. 2) We show how you can increase the efficiency by counting backwards ",
        "from the end of each row until you found the highest positive number finally 3) We do",
        " binary search to recursively split the row in two down to the highest negative element in the row. "
      ]
    },
    "count_negative_numbers_nested_loop": {
      "Title": "count_negative_numbers_nested_loop",
      "Input Data": [
        "\n[-3, -2, -1, -1, -1, -2 ,-3]\n",
        "[1,  2,  3,  4, 5, 6, 7],\n",
        "[-3, -1, -4,  6, 9, 10, 11],\n",
        "[0, 0, 2,  4, 7, 8, 10]]"
      ],
      "Description": [
        "In this approach we take the naive approach and loop through every element in each row. This will",
        " get us the accurate count but doesn't take advantage of the fact that the rows are sorted. The run time ",
        "complexity of this algorithm is O(nm) where n is the number of rows and m is the number of columns"
      ]
    },
    "count_negative_numbers_reverse_scan": {
      "Title": "count_negative_numbers_reverse_scan",
      "Input Data": [
        "\n[-3, -2, -1, -1, -1, -2 ,-3]\n",
        "[1,  2,  3,  4, 5, 6, 7],\n",
        "[-3, -1, -4,  6, 9, 10, 11],\n",
        "[0, 0, 2,  4, 7, 8, 10]]"
      ],
      "Description": [
        "In this approach we count backwards from the last element in each row to the first seen occurence of a negative",
        " positive number, once we see a positive numbner from counting backwards we know that there will be no negative",
        " numbers to the left of it so we can break out of counting this loop."
      ]
    },
    "count_negative_numbers_binary_search": {
      "Title": "count_negative_numbers_binary_search",
      "Input Data": [
        "\n[-3, -2, -1, -1, -1, -2 ,-3]\n",
        "[1,  2,  3,  4, 5, 6, 7],\n",
        "[-3, -1, -4,  6, 9, 10, 11],\n",
        "[0, 0, 2,  4, 7, 8, 10]]"
      ],
      "Description": [
        "In this approach we utilize binary search to recursively break the row into two until we find the highest index",
        " of a negative number in the row and then we return that index as the count of negative numbers in that row\n",
        " As we split the array in two we know that if the higher portion starts with a positive number we can discard",
        " this half in the search since each row of the array is sorted and positive numbers come after negative ones."
      ]
    }
  },
  "LongestCommonSubsequenceDemo": {
    "demo_class_description": {
      "Demo Class Name": "LongestCommonSubsequenceDemo",
      "Description": [
        "The longest common subsequence problem checks to see which characters in order in a second string matches those",
        " same characters in order in the first string. These characters will still match if there are any number of ",
        "erroneous characters between them. For example if string 1 is abced and string 2 is abd then the matching ",
        "subsequence would be abd.\n",
        "In this file we demonstrate two ways to solve this problem 1) Using a loop to keep track of a matrix counts of ",
        "matches between characters in the first string and characters in the second string and in approach 2) we use ",
        "two arrays to keep track of comparisons between the first and second string, then we recursively go through ",
        "each index of each array and compare the rest of the other array."
      ]
    },
    "longest_common_sequence_iterate": {
      "Title": "longest_common_sequence_iterate",
      "Input Data": [
        "sequence1 = ['a', 'c', 'b', 'c', 'f'],\n",
        "sequence2 = ['a', 'b', 'c', 'd', 'e', 'f']"
      ],
      "Description": [
        "In this approach we maintain a 2 dimensional matrix to keep track of matches between the first string and ",
        "the second. Each character in the second string will be compared against each character in the first string ",
        "and a match will be noted whenever this occurs. We then take the max of the matches per row of comparisons ",
        "and add these together to get the number of matches."
      ]
    },
    "longest_common_sequence_recursion": {
      "Title": "longest_common_sequence_recursion",
      "Input Data": [
        "sequence1 = ['a', 'c', 'b', 'c', 'f'],\n",
        "sequence2 = ['a', 'b', 'c', 'd', 'e', 'f']"
      ],
      "Description": [
        "In this approach we use two arrays to keep track of comparisons between the first and second ",
        "string, then we recursively go through each index of each array and compare the rest of the other array. In ",
        "this manner we end up comparing every element in the first string with every element in the second and every ",
        "element in the second string with every element in the first. Since we are counting forwards only we don't need",
        "to worry about if there are any matches going backwards"
      ]
    }
  }
}



